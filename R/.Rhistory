devtools::document()
degree.inv(matrix(c(1,2,3), nrow = 3), matrix(c(2,1,4), nrow = 3))
degree.inv(matrix(c(1,2,3), nrow = 3, ncol = 3), matrix(c(2,1,4), nrow = 3, ncol = 3))
degree.inv(x1,x2)
devtools::load_all()
?betweenness
g1 <- create.graph(x1, list("Spearman"))
g1
g1[[1]]
class(g1[[1]])
g1[[1]]$names
nrow(g1[[1]])
names(g1[[1]])
class(g1[[6]])
g1[[6:8]]
#' Differneces between two graphs
#' @description The method calculates differences between two graphs.
#' @param A,B are results from the function create.graph.
#' @details
#' One of the methods to compare two networks on their overall network characteristics.
#' @return A list of the differences in the number of edges, clusters and isolated nodes of the graph and the corresponding
#' minimum spanning tree.
#' @examples
#' diff.num(create.graph(A, list("Spearman")),create.graph(B; list("Spearman")))
diff.num<-function(A,B){
stopifnot("A and B need to be adjacency matrices." = class(A[[1]])==c("matrix","array") & class(B[[1]])==c("matrix","array")
& nrow(A[[1]])==ncol(A[[1]]) & nrow(B[[1]])==ncol(B[[1]])
"The listelements 6, 7, 8, 13, 14 and 15 need to be numbers. (This is the case if A and B are results of the function create.graph.)" =
class(A[[6]])=="numeric" & class(A[[7]])=="numeric" & class(A[[8]])=="numeric"
class(B[[6]])=="numeric" & class(B[[7]])=="numeric" & class(B[[8]])=="numeric"
class(A[[13]])=="numeric" & class(A[[14]])=="numeric" & class(A[[15]])=="numeric"
class(B[[13]])=="numeric" & class(B[[14]])=="numeric" & class(B[[15]])=="numeric")
if(all(A[[1]]==0) | all(B[[1]]==0)){
output<-rep(NA,6)
names(output)<-c("Graph Diff num of edges","Graph Diff num of clusters","Graph diff num of isolated nodes","MST Diff num of edges","MST Diff num of clusters","MST diff num of isolated nodes")
return(output)
}else{
dnumedges.g<-abs(A[[6]]-B[[6]])
dnumclus.g<-abs(A[[7]]-B[[7]])
dnumisolnodes.g<-abs(A[[8]]-B[[8]])
dnumedges.mst<-abs(A[[13]]-B[[13]])
dnumclus.mst<-abs(A[[14]]-B[[14]])
dnumisolnodes.mst<-abs(A[[15]]-B[[15]])
output<-c(dnumedges.g,dnumclus.g,dnumisolnodes.g,dnumedges.mst,dnumclus.mst,dnumisolnodes.mst)
names(output)<-c("Graph Diff num of edges","Graph Diff num of clusters","Graph diff num of isolated nodes","MST Diff num of edges","MST Diff num of clusters","MST diff num of isolated nodes")
return(output)
}
}
#' Differneces between two graphs
#' @description The method calculates differences between two graphs.
#' @param A,B are results from the function create.graph.
#' @details
#' One of the methods to compare two networks on their overall network characteristics.
#' @return A list of the differences in the number of edges, clusters and isolated nodes of the graph and the corresponding
#' minimum spanning tree.
#' @examples
#' diff.num(create.graph(A, list("Spearman")),create.graph(B; list("Spearman")))
diff.num<-function(A,B){
stopifnot("A and B need to be adjacency matrices." = class(A[[1]])==c("matrix","array") & class(B[[1]])==c("matrix","array")
& nrow(A[[1]])==ncol(A[[1]]) & nrow(B[[1]])==ncol(B[[1]])
"The listelements 6, 7, 8, 13, 14 and 15 need to be numbers. (This is the case if A and B are results of the function create.graph.)" =
class(A[[6]])=="numeric" & class(A[[7]])=="numeric" & class(A[[8]])=="numeric"
class(B[[6]])=="numeric" & class(B[[7]])=="numeric" & class(B[[8]])=="numeric"
class(A[[13]])=="numeric" & class(A[[14]])=="numeric" & class(A[[15]])=="numeric"
class(B[[13]])=="numeric" & class(B[[14]])=="numeric" & class(B[[15]])=="numeric")
if(all(A[[1]]==0) | all(B[[1]]==0)){
output<-rep(NA,6)
names(output)<-c("Graph Diff num of edges","Graph Diff num of clusters","Graph diff num of isolated nodes","MST Diff num of edges","MST Diff num of clusters","MST diff num of isolated nodes")
return(output)
}else{
dnumedges.g<-abs(A[[6]]-B[[6]])
dnumclus.g<-abs(A[[7]]-B[[7]])
dnumisolnodes.g<-abs(A[[8]]-B[[8]])
dnumedges.mst<-abs(A[[13]]-B[[13]])
dnumclus.mst<-abs(A[[14]]-B[[14]])
dnumisolnodes.mst<-abs(A[[15]]-B[[15]])
output<-c(dnumedges.g,dnumclus.g,dnumisolnodes.g,dnumedges.mst,dnumclus.mst,dnumisolnodes.mst)
names(output)<-c("Graph Diff num of edges","Graph Diff num of clusters","Graph diff num of isolated nodes","MST Diff num of edges","MST Diff num of clusters","MST diff num of isolated nodes")
return(output)
}
}
diff.num(create.graph(A, list("Spearman")),create.graph(B; list("Spearman")))
#' Differneces between two graphs
#' @description The method calculates differences between two graphs.
#' @param A,B are results from the function create.graph.
#' @details
#' One of the methods to compare two networks on their overall network characteristics.
#' @return A list of the differences in the number of edges, clusters and isolated nodes of the graph and the corresponding
#' minimum spanning tree.
#' @examples
#' diff.num(create.graph(A, list("Spearman")),create.graph(B; list("Spearman")))
diff.num<-function(A,B){
stopifnot("A and B need to be adjacency matrices." = class(A[[1]])==c("matrix","array") & class(B[[1]])==c("matrix","array")
& nrow(A[[1]])==ncol(A[[1]]) & nrow(B[[1]])==ncol(B[[1]]),
"The listelements 6, 7, 8, 13, 14 and 15 need to be numbers. (This is the case if A and B are results of the function create.graph.)" =
class(A[[6]])=="numeric" & class(A[[7]])=="numeric" & class(A[[8]])=="numeric"
class(B[[6]])=="numeric" & class(B[[7]])=="numeric" & class(B[[8]])=="numeric"
class(A[[13]])=="numeric" & class(A[[14]])=="numeric" & class(A[[15]])=="numeric"
class(B[[13]])=="numeric" & class(B[[14]])=="numeric" & class(B[[15]])=="numeric")
if(all(A[[1]]==0) | all(B[[1]]==0)){
output<-rep(NA,6)
names(output)<-c("Graph Diff num of edges","Graph Diff num of clusters","Graph diff num of isolated nodes","MST Diff num of edges","MST Diff num of clusters","MST diff num of isolated nodes")
return(output)
}else{
dnumedges.g<-abs(A[[6]]-B[[6]])
dnumclus.g<-abs(A[[7]]-B[[7]])
dnumisolnodes.g<-abs(A[[8]]-B[[8]])
dnumedges.mst<-abs(A[[13]]-B[[13]])
dnumclus.mst<-abs(A[[14]]-B[[14]])
dnumisolnodes.mst<-abs(A[[15]]-B[[15]])
output<-c(dnumedges.g,dnumclus.g,dnumisolnodes.g,dnumedges.mst,dnumclus.mst,dnumisolnodes.mst)
names(output)<-c("Graph Diff num of edges","Graph Diff num of clusters","Graph diff num of isolated nodes","MST Diff num of edges","MST Diff num of clusters","MST diff num of isolated nodes")
return(output)
}
}
#' Differneces between two graphs
#' @description The method calculates differences between two graphs.
#' @param A,B are results from the function create.graph.
#' @details
#' One of the methods to compare two networks on their overall network characteristics.
#' @return A list of the differences in the number of edges, clusters and isolated nodes of the graph and the corresponding
#' minimum spanning tree.
#' @examples
#' diff.num(create.graph(A, list("Spearman")),create.graph(B; list("Spearman")))
diff.num<-function(A,B){
stopifnot("A and B need to be adjacency matrices." = class(A[[1]])==c("matrix","array") && class(B[[1]])==c("matrix","array")
&& nrow(A[[1]])==ncol(A[[1]]) && nrow(B[[1]])==ncol(B[[1]]),
"The listelements 6, 7, 8, 13, 14 and 15 need to be numbers. (This is the case if A and B are results of the function create.graph.)" =
class(A[[6]])=="numeric" && class(A[[7]])=="numeric" && class(A[[8]])=="numeric"
class(B[[6]])=="numeric" && class(B[[7]])=="numeric" && class(B[[8]])=="numeric"
class(A[[13]])=="numeric" && class(A[[14]])=="numeric" && class(A[[15]])=="numeric"
class(B[[13]])=="numeric" && class(B[[14]])=="numeric" && class(B[[15]])=="numeric")
if(all(A[[1]]==0) | all(B[[1]]==0)){
output<-rep(NA,6)
names(output)<-c("Graph Diff num of edges","Graph Diff num of clusters","Graph diff num of isolated nodes","MST Diff num of edges","MST Diff num of clusters","MST diff num of isolated nodes")
return(output)
}else{
dnumedges.g<-abs(A[[6]]-B[[6]])
dnumclus.g<-abs(A[[7]]-B[[7]])
dnumisolnodes.g<-abs(A[[8]]-B[[8]])
dnumedges.mst<-abs(A[[13]]-B[[13]])
dnumclus.mst<-abs(A[[14]]-B[[14]])
dnumisolnodes.mst<-abs(A[[15]]-B[[15]])
output<-c(dnumedges.g,dnumclus.g,dnumisolnodes.g,dnumedges.mst,dnumclus.mst,dnumisolnodes.mst)
names(output)<-c("Graph Diff num of edges","Graph Diff num of clusters","Graph diff num of isolated nodes","MST Diff num of edges","MST Diff num of clusters","MST diff num of isolated nodes")
return(output)
}
}
#' Differneces between two graphs
#' @description The method calculates differences between two graphs.
#' @param A,B are results from the function create.graph.
#' @details
#' One of the methods to compare two networks on their overall network characteristics.
#' @return A list of the differences in the number of edges, clusters and isolated nodes of the graph and the corresponding
#' minimum spanning tree.
#' @examples
#' diff.num(create.graph(A, list("Spearman")),create.graph(B; list("Spearman")))
diff.num<-function(A,B){
#stopifnot("A and B need to be adjacency matrices." = class(A[[1]])==c("matrix","array") && class(B[[1]])==c("matrix","array")
#                                                    && nrow(A[[1]])==ncol(A[[1]]) && nrow(B[[1]])==ncol(B[[1]]),
#        "The listelements 6, 7, 8, 13, 14 and 15 need to be numbers. (This is the case if A and B are results of the function create.graph.)" =
#            class(A[[6]])=="numeric" && class(A[[7]])=="numeric" && class(A[[8]])=="numeric"
#           class(B[[6]])=="numeric" && class(B[[7]])=="numeric" && class(B[[8]])=="numeric"
#          class(A[[13]])=="numeric" && class(A[[14]])=="numeric" && class(A[[15]])=="numeric"
#         class(B[[13]])=="numeric" && class(B[[14]])=="numeric" && class(B[[15]])=="numeric")
if(all(A[[1]]==0) | all(B[[1]]==0)){
output<-rep(NA,6)
names(output)<-c("Graph Diff num of edges","Graph Diff num of clusters","Graph diff num of isolated nodes","MST Diff num of edges","MST Diff num of clusters","MST diff num of isolated nodes")
return(output)
}else{
dnumedges.g<-abs(A[[6]]-B[[6]])
dnumclus.g<-abs(A[[7]]-B[[7]])
dnumisolnodes.g<-abs(A[[8]]-B[[8]])
dnumedges.mst<-abs(A[[13]]-B[[13]])
dnumclus.mst<-abs(A[[14]]-B[[14]])
dnumisolnodes.mst<-abs(A[[15]]-B[[15]])
output<-c(dnumedges.g,dnumclus.g,dnumisolnodes.g,dnumedges.mst,dnumclus.mst,dnumisolnodes.mst)
names(output)<-c("Graph Diff num of edges","Graph Diff num of clusters","Graph diff num of isolated nodes","MST Diff num of edges","MST Diff num of clusters","MST diff num of isolated nodes")
return(output)
}
}
#' Differneces between two graphs
#' @description The method calculates differences between two graphs.
#' @param A,B are results from the function create.graph.
#' @details
#' One of the methods to compare two networks on their overall network characteristics.
#' @return A list of the differences in the number of edges, clusters and isolated nodes of the graph and the corresponding
#' minimum spanning tree.
#' @examples
#' diff.num(create.graph(A, list("Spearman")),create.graph(B; list("Spearman")))
diff.num<-function(A,B){
stopifnot("A and B need to be adjacency matrices." = class(A[[1]])==c("matrix","array") && class(B[[1]])==c("matrix","array")
&& nrow(A[[1]])==ncol(A[[1]]) && nrow(B[[1]])==ncol(B[[1]]))
#        "The listelements 6, 7, 8, 13, 14 and 15 need to be numbers. (This is the case if A and B are results of the function create.graph.)" =
#            class(A[[6]])=="numeric" && class(A[[7]])=="numeric" && class(A[[8]])=="numeric"
#           class(B[[6]])=="numeric" && class(B[[7]])=="numeric" && class(B[[8]])=="numeric"
#          class(A[[13]])=="numeric" && class(A[[14]])=="numeric" && class(A[[15]])=="numeric"
#         class(B[[13]])=="numeric" && class(B[[14]])=="numeric" && class(B[[15]])=="numeric")
if(all(A[[1]]==0) | all(B[[1]]==0)){
output<-rep(NA,6)
names(output)<-c("Graph Diff num of edges","Graph Diff num of clusters","Graph diff num of isolated nodes","MST Diff num of edges","MST Diff num of clusters","MST diff num of isolated nodes")
return(output)
}else{
dnumedges.g<-abs(A[[6]]-B[[6]])
dnumclus.g<-abs(A[[7]]-B[[7]])
dnumisolnodes.g<-abs(A[[8]]-B[[8]])
dnumedges.mst<-abs(A[[13]]-B[[13]])
dnumclus.mst<-abs(A[[14]]-B[[14]])
dnumisolnodes.mst<-abs(A[[15]]-B[[15]])
output<-c(dnumedges.g,dnumclus.g,dnumisolnodes.g,dnumedges.mst,dnumclus.mst,dnumisolnodes.mst)
names(output)<-c("Graph Diff num of edges","Graph Diff num of clusters","Graph diff num of isolated nodes","MST Diff num of edges","MST Diff num of clusters","MST diff num of isolated nodes")
return(output)
}
}
#' Differneces between two graphs
#' @description The method calculates differences between two graphs.
#' @param A,B are results from the function create.graph.
#' @details
#' One of the methods to compare two networks on their overall network characteristics.
#' @return A list of the differences in the number of edges, clusters and isolated nodes of the graph and the corresponding
#' minimum spanning tree.
#' @examples
#' diff.num(create.graph(A, list("Spearman")),create.graph(B; list("Spearman")))
diff.num<-function(A,B){
stopifnot("A and B need to be adjacency matrices." = class(A[[1]])==c("matrix","array") && class(B[[1]])==c("matrix","array")
&& nrow(A[[1]])==ncol(A[[1]]) && nrow(B[[1]])==ncol(B[[1]]),
"The listelements 6, 7, 8, 13, 14 and 15 need to be numbers. (This is the case if A and B are results of the function create.graph.)" =
class(A[[6]])=="numeric" && class(A[[7]])=="numeric" && class(A[[8]])=="numeric")
#           class(B[[6]])=="numeric" && class(B[[7]])=="numeric" && class(B[[8]])=="numeric"
#          class(A[[13]])=="numeric" && class(A[[14]])=="numeric" && class(A[[15]])=="numeric"
#         class(B[[13]])=="numeric" && class(B[[14]])=="numeric" && class(B[[15]])=="numeric")
if(all(A[[1]]==0) | all(B[[1]]==0)){
output<-rep(NA,6)
names(output)<-c("Graph Diff num of edges","Graph Diff num of clusters","Graph diff num of isolated nodes","MST Diff num of edges","MST Diff num of clusters","MST diff num of isolated nodes")
return(output)
}else{
dnumedges.g<-abs(A[[6]]-B[[6]])
dnumclus.g<-abs(A[[7]]-B[[7]])
dnumisolnodes.g<-abs(A[[8]]-B[[8]])
dnumedges.mst<-abs(A[[13]]-B[[13]])
dnumclus.mst<-abs(A[[14]]-B[[14]])
dnumisolnodes.mst<-abs(A[[15]]-B[[15]])
output<-c(dnumedges.g,dnumclus.g,dnumisolnodes.g,dnumedges.mst,dnumclus.mst,dnumisolnodes.mst)
names(output)<-c("Graph Diff num of edges","Graph Diff num of clusters","Graph diff num of isolated nodes","MST Diff num of edges","MST Diff num of clusters","MST diff num of isolated nodes")
return(output)
}
}
#' Differneces between two graphs
#' @description The method calculates differences between two graphs.
#' @param A,B are results from the function create.graph.
#' @details
#' One of the methods to compare two networks on their overall network characteristics.
#' @return A list of the differences in the number of edges, clusters and isolated nodes of the graph and the corresponding
#' minimum spanning tree.
#' @examples
#' diff.num(create.graph(A, list("Spearman")),create.graph(B; list("Spearman")))
diff.num<-function(A,B){
stopifnot("A and B need to be adjacency matrices." = class(A[[1]])==c("matrix","array") && class(B[[1]])==c("matrix","array")
&& nrow(A[[1]])==ncol(A[[1]]) && nrow(B[[1]])==ncol(B[[1]]),
"The listelements 6, 7, 8, 13, 14 and 15 need to be numbers. (This is the case if A and B are results of the function create.graph.)" =
class(A[[6]])=="numeric" && class(A[[7]])=="numeric" && class(A[[8]])=="numeric" &&
class(B[[6]])=="numeric" && class(B[[7]])=="numeric" && class(B[[8]])=="numeric" &&
class(A[[13]])=="numeric" && class(A[[14]])=="numeric" && class(A[[15]])=="numeric" &&
class(B[[13]])=="numeric" && class(B[[14]])=="numeric" && class(B[[15]])=="numeric")
if(all(A[[1]]==0) | all(B[[1]]==0)){
output<-rep(NA,6)
names(output)<-c("Graph Diff num of edges","Graph Diff num of clusters","Graph diff num of isolated nodes","MST Diff num of edges","MST Diff num of clusters","MST diff num of isolated nodes")
return(output)
}else{
dnumedges.g<-abs(A[[6]]-B[[6]])
dnumclus.g<-abs(A[[7]]-B[[7]])
dnumisolnodes.g<-abs(A[[8]]-B[[8]])
dnumedges.mst<-abs(A[[13]]-B[[13]])
dnumclus.mst<-abs(A[[14]]-B[[14]])
dnumisolnodes.mst<-abs(A[[15]]-B[[15]])
output<-c(dnumedges.g,dnumclus.g,dnumisolnodes.g,dnumedges.mst,dnumclus.mst,dnumisolnodes.mst)
names(output)<-c("Graph Diff num of edges","Graph Diff num of clusters","Graph diff num of isolated nodes","MST Diff num of edges","MST Diff num of clusters","MST diff num of isolated nodes")
return(output)
}
}
diff.num(create.graph(x1, list("Spearman")), create.graph(x2, list("Spearman")))
class(g1[[6]])
class(g1[[7]])
class(g1[[8]])
class(g1[[13]])
class(g1[[14]])
class(g1[[15]])
g1[[6]]
#' Differneces between two graphs
#' @description The method calculates differences between two graphs.
#' @param A,B are results from the function create.graph.
#' @details
#' One of the methods to compare two networks on their overall network characteristics.
#' @return A list of the differences in the number of edges, clusters and isolated nodes of the graph and the corresponding
#' minimum spanning tree.
#' @examples
#' diff.num(create.graph(A, list("Spearman")),create.graph(B; list("Spearman")))
diff.num<-function(A,B){
stopifnot("A and B need to be adjacency matrices." = class(A[[1]])==c("matrix","array") && class(B[[1]])==c("matrix","array")
&& nrow(A[[1]])==ncol(A[[1]]) && nrow(B[[1]])==ncol(B[[1]]),
"The listelements 6, 7, 8, 13, 14 and 15 need to be numbers. (This is the case if A and B are results of the function create.graph.)" =
(class(A[[6]])=="numeric" || class(A[[6]])=="integer") && (class(A[[7]])=="numeric" || class(A[[7]])=="integer") &&
(class(A[[8]])=="numeric" || class(A[[8]])=="integer") && (class(B[[6]])=="numeric" || class(B[[6]])=="integer") &&
(class(B[[7]])=="numeric" || class(B[[7]])=="integer") && (class(B[[8]])=="numeric" || class(B[[8]])=="integer") &&
(class(A[[13]])=="numeric" || class(A[[13]])=="integer") && (class(A[[14]])=="numeric" || class(A[[14]])=="integer") &&
(class(A[[15]])=="numeric" || class(A[[15]])=="integer") && (class(B[[13]])=="numeric" || class(B[[13]])=="integer") &&
(class(B[[14]])=="numeric" || class(B[[14]])=="integer") && (class(B[[15]])=="numeric" || class(B[[15]])=="integer"))
if(all(A[[1]]==0) | all(B[[1]]==0)){
output<-rep(NA,6)
names(output)<-c("Graph Diff num of edges","Graph Diff num of clusters","Graph diff num of isolated nodes","MST Diff num of edges","MST Diff num of clusters","MST diff num of isolated nodes")
return(output)
}else{
dnumedges.g<-abs(A[[6]]-B[[6]])
dnumclus.g<-abs(A[[7]]-B[[7]])
dnumisolnodes.g<-abs(A[[8]]-B[[8]])
dnumedges.mst<-abs(A[[13]]-B[[13]])
dnumclus.mst<-abs(A[[14]]-B[[14]])
dnumisolnodes.mst<-abs(A[[15]]-B[[15]])
output<-c(dnumedges.g,dnumclus.g,dnumisolnodes.g,dnumedges.mst,dnumclus.mst,dnumisolnodes.mst)
names(output)<-c("Graph Diff num of edges","Graph Diff num of clusters","Graph diff num of isolated nodes","MST Diff num of edges","MST Diff num of clusters","MST diff num of isolated nodes")
return(output)
}
}
diff.num(create.graph(x1, list("Spearman")), create.graph(x2, list("Spearman")))
degree.inv(matrix(c(1,2,3), nrow = 3, ncol = 3), matrix(c(,6,4,2), nrow = 3, ncol = 3))
degree.inv(matrix(c(1,2,3), nrow = 3, ncol = 3), matrix(c(6,4,2), nrow = 3, ncol = 3))
perm.test.nw(x1, x2, 10, list("Spearman"), 0.05, degree.inv)
warnings()
#' Degree differneces
#' @description The method calculates the differences between the degrees of the nodes of two matrices.
#' @param X,Y are matrices
#' @details
#' One of the methods to compare two networks on their node-specific differences.
#' @return A vector of the differneces of the degrees of the same nodes in two different networks.
#' @examples
#' degree.inv(X,Y)
#'
degree.inv<-function(X,Y){
#stopifnot("X and Y need to be matrices" = class(A)==c("matrix","array") && class(B)==c("matrix","array"),
#         "X and Y need to have the same dimensions" = nrow(A)==nrow(B) && ncol(A)==ncol(B))
if(all(X==0)){
A<-graph.adjacency(X,weighted=TRUE, mode="undirected", diag=FALSE)
}else{
A<-graph.adjacency(X,weighted=TRUE, mode="undirected", diag=FALSE)
# Simplfy the adjacency object
A<-simplify(A, remove.multiple=TRUE, remove.loops=TRUE)
# Convert edge weights to absolute values
E(A)$weight <- abs(E(A)$weight)
}
if(all(Y==0)){
B<-graph.adjacency(Y,weighted=TRUE, mode="undirected", diag=FALSE)
}else{
B<-graph.adjacency(Y,weighted=TRUE, mode="undirected", diag=FALSE)
# Simplfy the adjacency object
B<-simplify(B, remove.multiple=TRUE, remove.loops=TRUE)
# Convert edge weights to absolute values
E(B)$weight <- abs(E(B)$weight)
}
degA<-degree(A)
degB<-degree(B)
output<-abs(degA-degB)
names(output)<-colnames(X)
return(output)
}
perm.test.nw(x1, x2, 10, list("Spearman"), 0.05, degree.inv)
edge.inv.direc(x1,x2)
edge.inv.direc(matrix(c(1,2,3), nrow = 3, ncol = 3), matrix(c(2,3), nrow = 2, ncol = 2))
class(x1)
t1 <- tibble(x=c(1,2,3),y=c(2,3,4),z=c(3,4,5))
t2 <- tibble(x=c(3,2,1),y=c(4,3,2),z=c(5,4,3))
degree.inv(t1,t2)
m1 <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3)
m2 <- matrix(c(2,2,3,3,5,5,7,7,9), nrow = 3)
degree.inv(m1,m2)
edge.inv.direc(t1,t2)
edge.inv.direc(m1,m2)
m1
m2
edge.inv(m1,m2)
edge.inv.direc(x1,x2)
10.03%1
10.03%%1
10%%1
10.0%%1
10.0%%1 == 0
class(degree.inv)
devtools::load_all()
perm.test.nw(x1,x2, 10, list("Spearman"), 0.05, degree.inv)
devtools::load_all()
?rcorr
load("D:/LEONIE/DataExample.Rdata")
load("D:/LEONIE/DataExample.Rdata")
load("C:/Users/leoni/Desktop/LEONIE/DataExample.RData")
devtools::load_all()
devtools::load_all()
perm.test.nw(A=x1, B=x2, permnum=10, methodlist = list("Spearman"), thresh = 0.05,score.funct = spec.dist)
perm.test.nw(A=x1, B=x2, permnum=10, methodlist = list("Spearman.adj","holm"), thresh = 0.05,score.funct = spec.dist)
perm.test.nw(A=x1, B=x2, permnum=10, methodlist = list("Spearman.adj","holm"), thresh = 0.05,score.funct = degree.inv)
devtools::check()
devtools::check()
g1 <- create.graph(x1,list("Spearman"))
g1
g1m <- g1[[1]]
g1m
names(g1m)
?
q
colnames(g1m)
m <- matrix(c(2,1), nrow = 2, ncol = 2)
colnames(m)
?degree
degree(x1)
degree(graph.adjacency(x1, weighted = TRUE, mode="undirected",diag =FALSE))
A<-graph.adjacency(x1,weighted=TRUE, mode="undirected", diag=FALSE)
A<-graph.adjacency(create.adjacency.matrix(x1,list("Spearman")),weighted=TRUE, mode="undirected", diag=FALSE)
# Simplfy the adjacency object
A<-simplify(A, remove.multiple=TRUE, remove.loops=TRUE)
# Convert edge weights to absolute values
E(A)$weight <- abs(E(A)$weight)
degree(A)
create.adjacency.matrix(x1,list("Spearman"))
#' Degree differneces
#' @description The method calculates the differences between the degrees of the nodes of two matrices.
#' @param X,Y are matrices
#' @details
#' One of the methods to compare two networks on their node-specific differences.
#' @return A vector of the differneces of the degrees of the same nodes in two different networks.
#' @examples
#' degree.inv(X,Y)
#'
degree.inv<-function(X,Y){
stopifnot("X and Y need to be matrices" = class(X)==c("matrix","array") && class(Y)==c("matrix","array"),
"X and Y need to have the same dimensions" = nrow(X)==nrow(Y) && ncol(X)==ncol(Y),
"To compare the graphs of X and Y correctly they need the same columntitles" = colnames(X)==colnames(Y))
if(all(X==0)){
A<-graph.adjacency(X,weighted=TRUE, mode="undirected", diag=FALSE)
}else{
A<-graph.adjacency(X,weighted=TRUE, mode="undirected", diag=FALSE)
# Simplfy the adjacency object
A<-simplify(A, remove.multiple=TRUE, remove.loops=TRUE)
# Convert edge weights to absolute values
E(A)$weight <- abs(E(A)$weight)
}
if(all(Y==0)){
B<-graph.adjacency(Y,weighted=TRUE, mode="undirected", diag=FALSE)
}else{
B<-graph.adjacency(Y,weighted=TRUE, mode="undirected", diag=FALSE)
# Simplfy the adjacency object
B<-simplify(B, remove.multiple=TRUE, remove.loops=TRUE)
# Convert edge weights to absolute values
E(B)$weight <- abs(E(B)$weight)
}
degA<-degree(A)
degB<-degree(B)
output<-abs(degA-degB)
names(output)<-colnames(X)
return(output)
}
perm.test.nw(A=x1, B=x2, permnum=10, methodlist = list("Spearman.adj","holm"), thresh = 0.05,score.funct = degree.inv)
#A<-graph.adjacency(create.adjacency.matrix(x1,list("Spearman")),weighted=TRUE, mode="undirected", diag=FALSE)
# Simplfy the adjacency object
#A<-simplify(A, remove.multiple=TRUE, remove.loops=TRUE)
# Convert edge weights to absolute values
#E(A)$weight <- abs(E(A)$weight)
#degree(A)
degree.inv(create.adjacency.matrix(x1, list("Spearman")), create.adjacency.matrix(x2, list("Spearman")))
?betweenness
#' Betweenness
#' @description A
#' @param X
#' @param Y
#' @details
#' One of the methods to compare two networks on their node-specific differences.
#' @return Return
#' @examples
#' betweenness.inv(X,Y)
#'
betweenness.inv<-function(X,Y){
stopifnot("X and Y need to be matrices" = class(X)==c("matrix","array") && class(Y)==c("matrix","array"),
"X and Y need to have the same dimensions" = nrow(X)==nrow(Y) && ncol(X)==ncol(Y),
"To compare the graphs of X and Y correctly they need the same columntitles" = colnames(X)==colnames(Y))
if(all(X==0)){
A<-graph.adjacency(X,weighted=TRUE, mode="undirected", diag=FALSE)
}else{
A<-graph.adjacency(X,weighted=TRUE, mode="undirected", diag=FALSE)
# Simplfy the adjacency object
A<-simplify(A, remove.multiple=TRUE, remove.loops=TRUE)
# Convert edge weights to absolute values
E(A)$weight <- abs(E(A)$weight)
}
if(all(Y==0)){
B<-graph.adjacency(Y,weighted=TRUE, mode="undirected", diag=FALSE)
}else{
B<-graph.adjacency(Y,weighted=TRUE, mode="undirected", diag=FALSE)
# Simplfy the adjacency object
B<-simplify(B, remove.multiple=TRUE, remove.loops=TRUE)
# Convert edge weights to absolute values
E(B)$weight <- abs(E(B)$weight)
}
betA<-betweenness(A)
betB<-betweenness(B)
output<-abs(betA-betB)
names(output)<-colnames(X)
return(output)
}
betweenness.inv(create.adjacency.matrix(x1,list("Spearman")), create.adjacency.matrix(x2,list("Spearman")))
closeness.inv(create.adjacency.matrix(x1,list("Spearman")), create.adjacency.matrix(x2,list("Spearman")))
eigcen.inv(create.adjacency.matrix(x1,list("Spearman")), create.adjacency.matrix(x2,list("Spearman")))
edge.inv.direc(create.adjacency.matrix(x1,list("Spearman")), create.adjacency.matrix(x2,list("Spearman")))
edge.inv(create.adjacency.matrix(x1,list("Spearman")), create.adjacency.matrix(x2,list("Spearman")))
devtools::check()
devtools::check()
