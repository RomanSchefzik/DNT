color = E(g1[[2]])$weight,
edge.arrow.mode=FALSE,
col
main="Survivors Event")
}else{
plot(
g1[[2]],
layout=layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color=E(g1[[2]])$color,
#asp=FALSE,
vertex.label.cex=tSize,
edge.width=E(g1[[2]])$weight*4,
edge.arrow.mode=FALSE,
main="Survivors Admission")
plot(
g2[[2]],
layout=layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color="black",
#asp=FALSE,
vertex.label.cex=tSize,
edge.width=E(g2[[2]])$weight*4,
edge.arrow.mode=FALSE,
main="Survivors Event")
}
#caption <- methodlist[[1]]
mtext(caption,outer=TRUE,cex=1.5)
dev.off()
}
#' @param tSize the size of the names inside the vertices.
#' @param filename the directory where the file shall be saved.
#' @details
#' The graphs are plotted with the same layout and other plot characteristics so that the two graphs are easy to
#' compare. The left network is the Survivors Admission and the right one the Survivor Event.
#' @return
#' @examples
#' graph.plot(x1,x2, list("Spearman), caption = "Spearman")
#' @export
#'
graph.plot <- function(A, B, methodlist, cluster = TRUE, negcol = "red", poscol= "blue", caption, layout = layout.fruchterman.reingold, vSize = 16, tSize = 0.8, directory){
stopifnot("cluster needs be boolean" = cluster==TRUE || cluster==FALSE,
"negcol and poscol need to be strings" = class(negcol)=="character" && class(poscol)=="character",
"caption needs to be a string" = class(caption)=="character",
"layout needs to be a layout-function" = class(layout)=="function",
"vSize and tSize need to be positive numbers" = (class(vSize)=="numeric" || class(vSize)=="integer") &&
(class(tSize)=="numeric" || class(tSize)=="integer"),
"vSize needs to be 20 times bigger than tSize to have a good relation between the names and the vertices" = tSize*20<=vSize,
"directory needs to be a string" = class(directory)=="character")
g1 <- create.Igraphclustering(A, methodlist)
g2 <- create.Igraphclustering(B, methodlist)
print(g1[[2]])
print(E(g1[[2]]))
print(E(g1[[2]])$weight)
E(g1[[2]])[which(E(g1[[2]])$weight<0)]$color <- negcol
E(g1[[2]])[which(E(g1[[2]])$weight>0)]$color <- poscol
E(g2[[2]])[which(E(g2[[2]])$weight<0)]$color <- negcol
E(g2[[2]])[which(E(g2[[2]])$weight>0)]$color <- poscol
E(g1[[2]])$weight <- abs(E(g1[[2]])$weight)
E(g2[[2]])$weight <- abs(E(g2[[2]])$weight)
print(E(g1[[2]])$color)
filename <- stringr::str_glue(directory, ".pdf", sep ="")
pdf(file=filename,width=15,height=8)#,pointsize=15)
par(mfrow=c(1,2),oma=c(0,0,2,0))
if(cluster == TRUE){
plot(
g1[[1]], g1[[2]],
layout= layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color="red",
#asp=1,
vertex.label.cex=tSize,
edge.width=E(g1[[2]])$weight*4,
color = E(g1[[2]])$weight,
edge.arrow.mode=FALSE,
main="Survivors Admission")
plot(
g2[[1]], g2[[2]],
layout=layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color="black",
#asp=FALSE,
vertex.label.cex=tSize,
edge.width=E(g2[[2]])$weight*4,
color = E(g1[[2]])$weight,
edge.arrow.mode=FALSE,
main="Survivors Event")
}else{
plot(
g1[[2]],
layout=layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color=E(g1[[2]])$color,
#asp=FALSE,
vertex.label.cex=tSize,
edge.width=E(g1[[2]])$weight*4,
edge.arrow.mode=FALSE,
main="Survivors Admission")
plot(
g2[[2]],
layout=layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color="black",
#asp=FALSE,
vertex.label.cex=tSize,
edge.width=E(g2[[2]])$weight*4,
edge.arrow.mode=FALSE,
main="Survivors Event")
}
#caption <- methodlist[[1]]
mtext(caption,outer=TRUE,cex=1.5)
dev.off()
}
#g <- g[[2]]
#g
#V(g[[2]])
graph.plot(x1, x2, methodlist = list("Spearman"), cluster=FALSE, negcol = "yellow", poscol = "green" ,caption = "Spearman",tSize = 1, vSize = 20,layout= layout.fruchterman.reingold,directory  = "C:/Users/leoni/Desktop/LEONIE/ClusPlots4")
#g <- g[[2]]
#g
#V(g[[2]])
graph.plot(x1, x2, methodlist = list("Spearman"), cluster=TRUE, negcol = "yellow", poscol = "green" ,caption = "Spearman",tSize = 1, vSize = 20,layout= layout.fruchterman.reingold,directory  = "C:/Users/leoni/Desktop/LEONIE/ClusPlots4")
#' @param tSize the size of the names inside the vertices.
#' @param filename the directory where the file shall be saved.
#' @details
#' The graphs are plotted with the same layout and other plot characteristics so that the two graphs are easy to
#' compare. The left network is the Survivors Admission and the right one the Survivor Event.
#' @return
#' @examples
#' graph.plot(x1,x2, list("Spearman), caption = "Spearman")
#' @export
#'
graph.plot <- function(A, B, methodlist, cluster = TRUE, negcol = "red", poscol= "blue", caption, layout = layout.fruchterman.reingold, vSize = 16, tSize = 0.8, directory){
stopifnot("cluster needs be boolean" = cluster==TRUE || cluster==FALSE,
"negcol and poscol need to be strings" = class(negcol)=="character" && class(poscol)=="character",
"caption needs to be a string" = class(caption)=="character",
"layout needs to be a layout-function" = class(layout)=="function",
"vSize and tSize need to be positive numbers" = (class(vSize)=="numeric" || class(vSize)=="integer") &&
(class(tSize)=="numeric" || class(tSize)=="integer"),
"vSize needs to be 20 times bigger than tSize to have a good relation between the names and the vertices" = tSize*20<=vSize,
"directory needs to be a string" = class(directory)=="character")
g1 <- create.Igraphclustering(A, methodlist)
g2 <- create.Igraphclustering(B, methodlist)
print(g1[[2]])
print(E(g1[[2]]))
print(E(g1[[2]])$weight)
E(g1[[2]])[which(E(g1[[2]])$weight<0)]$color <- negcol
E(g1[[2]])[which(E(g1[[2]])$weight>0)]$color <- poscol
E(g2[[2]])[which(E(g2[[2]])$weight<0)]$color <- negcol
E(g2[[2]])[which(E(g2[[2]])$weight>0)]$color <- poscol
E(g1[[2]])$weight <- abs(E(g1[[2]])$weight)
E(g2[[2]])$weight <- abs(E(g2[[2]])$weight)
print(E(g1[[2]])$color)
filename <- stringr::str_glue(directory, ".pdf", sep ="")
pdf(file=filename,width=15,height=8)#,pointsize=15)
par(mfrow=c(1,2),oma=c(0,0,2,0))
if(cluster == TRUE){
plot(
g1[[1]], g1[[2]],
layout= layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color="red",
#asp=1,
vertex.label.cex=tSize,
edge.width=E(g1[[2]])$weight*4,
color = "blue",
edge.arrow.mode=FALSE,
main="Survivors Admission")
plot(
g2[[1]], g2[[2]],
layout=layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color="black",
#asp=FALSE,
vertex.label.cex=tSize,
edge.width=E(g2[[2]])$weight*4,
color = "blue",
edge.arrow.mode=FALSE,
main="Survivors Event")
}else{
plot(
g1[[2]],
layout=layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color=E(g1[[2]])$color,
#asp=FALSE,
vertex.label.cex=tSize,
edge.width=E(g1[[2]])$weight*4,
edge.arrow.mode=FALSE,
main="Survivors Admission")
plot(
g2[[2]],
layout=layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color="black",
#asp=FALSE,
vertex.label.cex=tSize,
edge.width=E(g2[[2]])$weight*4,
edge.arrow.mode=FALSE,
main="Survivors Event")
}
#caption <- methodlist[[1]]
mtext(caption,outer=TRUE,cex=1.5)
dev.off()
}
#g <- g[[2]]
#g
#V(g[[2]])
graph.plot(x1, x2, methodlist = list("Spearman"), cluster=TRUE, negcol = "yellow", poscol = "green" ,caption = "Spearman",tSize = 1, vSize = 20,layout= layout.fruchterman.reingold,directory  = "C:/Users/leoni/Desktop/LEONIE/ClusPlots4")
#' @param tSize the size of the names inside the vertices.
#' @param filename the directory where the file shall be saved.
#' @details
#' The graphs are plotted with the same layout and other plot characteristics so that the two graphs are easy to
#' compare. The left network is the Survivors Admission and the right one the Survivor Event.
#' @return
#' @examples
#' graph.plot(x1,x2, list("Spearman), caption = "Spearman")
#' @export
#'
graph.plot <- function(A, B, methodlist, cluster = TRUE, negcol = "red", poscol= "blue", caption, layout = layout.fruchterman.reingold, vSize = 16, tSize = 0.8, directory){
stopifnot("cluster needs be boolean" = cluster==TRUE || cluster==FALSE,
"negcol and poscol need to be strings" = class(negcol)=="character" && class(poscol)=="character",
"caption needs to be a string" = class(caption)=="character",
"layout needs to be a layout-function" = class(layout)=="function",
"vSize and tSize need to be positive numbers" = (class(vSize)=="numeric" || class(vSize)=="integer") &&
(class(tSize)=="numeric" || class(tSize)=="integer"),
"vSize needs to be 20 times bigger than tSize to have a good relation between the names and the vertices" = tSize*20<=vSize,
"directory needs to be a string" = class(directory)=="character")
g1 <- create.Igraphclustering(A, methodlist)
g2 <- create.Igraphclustering(B, methodlist)
print(g1[[2]])
print(E(g1[[2]]))
print(E(g1[[2]])$weight)
E(g1[[2]])[which(E(g1[[2]])$weight<0)]$color <- negcol
E(g1[[2]])[which(E(g1[[2]])$weight>0)]$color <- poscol
E(g2[[2]])[which(E(g2[[2]])$weight<0)]$color <- negcol
E(g2[[2]])[which(E(g2[[2]])$weight>0)]$color <- poscol
E(g1[[2]])$weight <- abs(E(g1[[2]])$weight)
E(g2[[2]])$weight <- abs(E(g2[[2]])$weight)
print(E(g1[[2]])$color)
filename <- stringr::str_glue(directory, ".pdf", sep ="")
pdf(file=filename,width=15,height=8)#,pointsize=15)
par(mfrow=c(1,2),oma=c(0,0,2,0))
if(cluster == TRUE){
plot(
g1[[1]], g1[[2]],
layout= layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color="red",
#asp=1,
vertex.label.cex=tSize,
edge.width=E(g1[[2]])$weight*4,
edge.color = "blue",
edge.arrow.mode=FALSE,
main="Survivors Admission")
plot(
g2[[1]], g2[[2]],
layout=layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color="black",
#asp=FALSE,
vertex.label.cex=tSize,
edge.width=E(g2[[2]])$weight*4,
color = "blue",
edge.arrow.mode=FALSE,
main="Survivors Event")
}else{
plot(
g1[[2]],
layout=layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color=E(g1[[2]])$color,
#asp=FALSE,
vertex.label.cex=tSize,
edge.width=E(g1[[2]])$weight*4,
edge.arrow.mode=FALSE,
main="Survivors Admission")
plot(
g2[[2]],
layout=layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color="black",
#asp=FALSE,
vertex.label.cex=tSize,
edge.width=E(g2[[2]])$weight*4,
edge.arrow.mode=FALSE,
main="Survivors Event")
}
#caption <- methodlist[[1]]
mtext(caption,outer=TRUE,cex=1.5)
dev.off()
}
#g <- g[[2]]
#g
#V(g[[2]])
graph.plot(x1, x2, methodlist = list("Spearman"), cluster=TRUE, negcol = "yellow", poscol = "green" ,caption = "Spearman",tSize = 1, vSize = 20,layout= layout.fruchterman.reingold,directory  = "C:/Users/leoni/Desktop/LEONIE/ClusPlots4")
#' @param tSize the size of the names inside the vertices.
#' @param filename the directory where the file shall be saved.
#' @details
#' The graphs are plotted with the same layout and other plot characteristics so that the two graphs are easy to
#' compare. The left network is the Survivors Admission and the right one the Survivor Event.
#' @return
#' @examples
#' graph.plot(x1,x2, list("Spearman), caption = "Spearman")
#' @export
#'
graph.plot <- function(A, B, methodlist, cluster = TRUE, negcol = "red", poscol= "blue", caption, layout = layout.fruchterman.reingold, vSize = 16, tSize = 0.8, directory){
stopifnot("cluster needs be boolean" = cluster==TRUE || cluster==FALSE,
"negcol and poscol need to be strings" = class(negcol)=="character" && class(poscol)=="character",
"caption needs to be a string" = class(caption)=="character",
"layout needs to be a layout-function" = class(layout)=="function",
"vSize and tSize need to be positive numbers" = (class(vSize)=="numeric" || class(vSize)=="integer") &&
(class(tSize)=="numeric" || class(tSize)=="integer"),
"vSize needs to be 20 times bigger than tSize to have a good relation between the names and the vertices" = tSize*20<=vSize,
"directory needs to be a string" = class(directory)=="character")
g1 <- create.Igraphclustering(A, methodlist)
g2 <- create.Igraphclustering(B, methodlist)
print(g1[[2]])
print(E(g1[[2]]))
print(E(g1[[2]])$weight)
E(g1[[2]])[which(E(g1[[2]])$weight<0)]$color <- negcol
E(g1[[2]])[which(E(g1[[2]])$weight>0)]$color <- poscol
E(g2[[2]])[which(E(g2[[2]])$weight<0)]$color <- negcol
E(g2[[2]])[which(E(g2[[2]])$weight>0)]$color <- poscol
E(g1[[2]])$weight <- abs(E(g1[[2]])$weight)
E(g2[[2]])$weight <- abs(E(g2[[2]])$weight)
print(E(g1[[2]])$color)
filename <- stringr::str_glue(directory, ".pdf", sep ="")
pdf(file=filename,width=15,height=8)#,pointsize=15)
par(mfrow=c(1,2),oma=c(0,0,2,0))
if(cluster == TRUE){
plot(
g1[[1]], g1[[2]],
layout= layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color="red",
#asp=1,
vertex.label.cex=tSize,
edge.width=E(g1[[2]])$weight*4,
edge.color = E(g1[[2]])$color,
edge.arrow.mode=FALSE,
main="Survivors Admission")
plot(
g2[[1]], g2[[2]],
layout=layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color="black",
#asp=FALSE,
vertex.label.cex=tSize,
edge.width=E(g2[[2]])$weight*4,
edge.color = E(g2[[2]])$color,
edge.arrow.mode=FALSE,
main="Survivors Event")
}else{
plot(
g1[[2]],
layout=layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color=E(g1[[2]])$color,
#asp=FALSE,
vertex.label.cex=tSize,
edge.width=E(g1[[2]])$weight*4,
edge.arrow.mode=FALSE,
main="Survivors Admission")
plot(
g2[[2]],
layout=layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color="black",
#asp=FALSE,
vertex.label.cex=tSize,
edge.width=E(g2[[2]])$weight*4,
edge.arrow.mode=FALSE,
main="Survivors Event")
}
#caption <- methodlist[[1]]
mtext(caption,outer=TRUE,cex=1.5)
dev.off()
}
#g <- g[[2]]
#g
#V(g[[2]])
graph.plot(x1, x2, methodlist = list("Spearman"), cluster=TRUE, negcol = "yellow", poscol = "green" ,caption = "Spearman",tSize = 1, vSize = 20,layout= layout.fruchterman.reingold,directory  = "C:/Users/leoni/Desktop/LEONIE/ClusPlots4")
#' @param tSize the size of the names inside the vertices.
#' @param filename the directory where the file shall be saved.
#' @details
#' The graphs are plotted with the same layout and other plot characteristics so that the two graphs are easy to
#' compare. The left network is the Survivors Admission and the right one the Survivor Event.
#' @return
#' @examples
#' graph.plot(x1,x2, list("Spearman), caption = "Spearman")
#' @export
#'
graph.plot <- function(A, B, methodlist, cluster = TRUE, negcol = "red", poscol= "blue", caption, layout = layout.fruchterman.reingold, vSize = 16, tSize = 0.8, directory){
stopifnot("cluster needs be boolean" = cluster==TRUE || cluster==FALSE,
"negcol and poscol need to be strings" = class(negcol)=="character" && class(poscol)=="character",
"caption needs to be a string" = class(caption)=="character",
"layout needs to be a layout-function" = class(layout)=="function",
"vSize and tSize need to be positive numbers" = (class(vSize)=="numeric" || class(vSize)=="integer") &&
(class(tSize)=="numeric" || class(tSize)=="integer"),
"vSize needs to be 20 times bigger than tSize to have a good relation between the names and the vertices" = tSize*20<=vSize,
"directory needs to be a string" = class(directory)=="character")
g1 <- create.Igraphclustering(A, methodlist)
g2 <- create.Igraphclustering(B, methodlist)
E(g1[[2]])[which(E(g1[[2]])$weight<0)]$color <- negcol
E(g1[[2]])[which(E(g1[[2]])$weight>0)]$color <- poscol
E(g2[[2]])[which(E(g2[[2]])$weight<0)]$color <- negcol
E(g2[[2]])[which(E(g2[[2]])$weight>0)]$color <- poscol
E(g1[[2]])$weight <- abs(E(g1[[2]])$weight)
E(g2[[2]])$weight <- abs(E(g2[[2]])$weight)
filename <- stringr::str_glue(directory, ".pdf", sep ="")
pdf(file=filename,width=15,height=8)#,pointsize=15)
par(mfrow=c(1,2),oma=c(0,0,2,0))
if(cluster == TRUE){
plot(
g1[[1]], g1[[2]],
layout= layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color="red",
#asp=1,
vertex.label.cex=tSize,
edge.width=E(g1[[2]])$weight*4,
edge.color = E(g1[[2]])$color,
edge.arrow.mode=FALSE,
main="Survivors Admission")
plot(
g2[[1]], g2[[2]],
layout=layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color="black",
#asp=FALSE,
vertex.label.cex=tSize,
edge.width=E(g2[[2]])$weight*4,
edge.color = E(g2[[2]])$color,
edge.arrow.mode=FALSE,
main="Survivors Event")
}else{
plot(
g1[[2]],
layout=layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color=E(g1[[2]])$color,
#asp=FALSE,
vertex.label.cex=tSize,
edge.width=E(g1[[2]])$weight*4,
edge.arrow.mode=FALSE,
main="Survivors Admission")
plot(
g2[[2]],
layout=layout,
edge.curved=TRUE,
vertex.size=vSize,
#vertex.label.dist=-0.5,
#vertex.label.color="black",
#asp=FALSE,
vertex.label.cex=tSize,
edge.width=E(g2[[2]])$weight*4,
edge.arrow.mode=FALSE,
main="Survivors Event")
}
#caption <- methodlist[[1]]
mtext(caption,outer=TRUE,cex=1.5)
dev.off()
}
#g <- create.Igraphclustering(x1,list("Spearman"))
#E(g[[1]])
#E(g[[2]])
#g <- g[[2]]
#g
#V(g[[2]])
graph.plot(x1, x2, methodlist = list("Spearman"), cluster=TRUE, negcol = "yellow", poscol = "green" ,caption = "Spearman",tSize = 1, vSize = 20,layout= layout.fruchterman.reingold,directory  = "C:/Users/leoni/Desktop/LEONIE/ClusPlots4")
